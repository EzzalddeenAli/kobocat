# Generated by Django 3.2.15 on 2023-03-02 14:55

from django.conf import settings
from django.db import migrations


KPI_TABLES = [
    'constance_config',
    'kpi_objectpermission',
    'kpi_assetsnapshot',
    'kpi_assetfile',
    'kpi_assetversion',
    'kpi_assetuserpartialpermission',
    'kpi_asset',
    'kpi_asset_old',
    'kpi_collection',
    'kpi_importtask',
    'kpi_authorizedapplication',
    'kpi_taguid',
    'kpi_onetimeauthenticationkey',
    'kpi_usercollectionsubscription',
    'kpi_exporttask',
    'hub_sitewidemessage',
    'hub_configurationfile',
    'hub_extrauserdetail',
    'hub_perusersetting',
    'hub_formbuilderpreference',
    'hook_hooklog',
    'hook_hook',
    'external_integrations_corsmodel',
    'help_inappmessageuserinteractions',
    'help_inappmessagefile',
    'help_inappmessage',
]

DEPRECATED_TABLES = [
    'djcelery_crontabschedule',
    'djcelery_intervalschedule',
    'djcelery_periodictask',
    'djcelery_periodictasks',
    'djcelery_taskstate',
    'djcelery_workerstate',
    'celery_tasksetmeta',
    'celery_taskmeta',
    'koboform_surveydraft',
    'koboform_surveypreview',
    'registration_supervisedregistrationprofile',
    'registration_registrationprofile',
    'south_migrationhistory',
    'stats_statscount',
]


def delete_if_exists(table_name):
    """
    Delete old record from the table if table exists.
    Avoid DROP SQL statement to fail because of constraints if table still
    contains data
    """
    return f"""
    DO $$
    BEGIN
        IF EXISTS(SELECT 1 FROM information_schema.tables WHERE table_schema = current_schema() AND table_name = '{table_name}') THEN
            DELETE FROM {table_name};
        END IF;
    END; $$;
    """


def get_operations():
    if settings.SKIP_HEAVY_MIGRATIONS:
        return []

    tables = KPI_TABLES + DEPRECATED_TABLES
    print(
        """
        This might take a while. If it is too slow, you may want to re-run the
        migration with SKIP_HEAVY_MIGRATIONS=True.
        """
    )
    operations = []
    for table in tables:
        operations.append(
            migrations.RunSQL(
                sql=(
                    delete_if_exists(table)
                    + f'DROP TABLE IF EXISTS {table};'
                ),
                reverse_sql=migrations.RunSQL.noop,
            )
        )
    return operations


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0010_userprofile_metadata_jsonfield'),
    ]

    operations = get_operations()
